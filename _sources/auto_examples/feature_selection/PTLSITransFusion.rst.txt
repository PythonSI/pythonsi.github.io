
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples\feature_selection\PTLSITransFusion.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_feature_selection_PTLSITransFusion.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_feature_selection_PTLSITransFusion.py:


Selective inference for TransFusion Feature Selection
=====================================================

.. GENERATED FROM PYTHON SOURCE LINES 5-16

.. code-block:: Python


    # Author: Nguyen Vu Khai Tam & Cao Huyen My

    from pythonsi import Pipeline
    from pythonsi.transfer_learning_hdr import TLTransFusion
    from pythonsi import Data
    from pythonsi.test_statistics import TLHDRTestStatistic
    import numpy as np
    import matplotlib.pyplot as plt









.. GENERATED FROM PYTHON SOURCE LINES 17-18

Generate data

.. GENERATED FROM PYTHON SOURCE LINES 18-73

.. code-block:: Python

    def generate_coef(p, s, true_beta=0.25, num_info_aux=3, num_uninfo_aux=2, gamma=0.01):
        K = num_info_aux + num_uninfo_aux
        beta_0 = np.concatenate([np.full(s, true_beta), np.zeros(p - s)])

        Beta_S = np.tile(beta_0, (K, 1)).T
        if s >= 0:
            Beta_S[0, :] -= 2 * true_beta
            for m in range(K):
                if m < num_uninfo_aux:
                    Beta_S[:50, m] += np.random.normal(0, true_beta * gamma * 10, 50)
                else:
                    Beta_S[:25, m] += np.random.normal(0, true_beta * gamma, 25)
        return Beta_S, beta_0


    def generate_data(
        p, s, nS, nT, true_beta=0.25, num_info_aux=3, num_uninfo_aux=2, gamma=0.01
    ):
        K = num_info_aux + num_uninfo_aux

        Beta_S, beta_0 = generate_coef(p, s, true_beta, num_info_aux, num_uninfo_aux, gamma)
        Beta = np.column_stack([Beta_S[:, i] for i in range(K)] + [beta_0])

        X_list = []
        Y_list = []

        cov = np.eye(p)
        N_vec = [nS] * K + [nT]

        for k in range(K + 1):
            Xk = np.random.multivariate_normal(mean=np.zeros(p), cov=cov, size=N_vec[k])
            true_Yk = Xk @ Beta[:, k]
            noise = np.random.normal(0, 1, N_vec[k])
            # noise = np.random.laplace(0, 1, N_vec[k])
            # noise = skewnorm.rvs(a=10, loc=0, scale=1, size=N_vec[k])
            # noise = np.random.standard_t(df=20, size=N_vec[k])
            Yk = true_Yk + noise
            X_list.append(Xk)
            Y_list.append(Yk.reshape(-1, 1))

        XS_list = np.array(X_list[:-1])
        YS_list = np.array(Y_list[:-1]).reshape(-1, 1)
        X0 = X_list[-1]
        Y0 = Y_list[-1]
        SigmaS_list = np.array([np.eye(nS) for _ in range(K)])
        Sigma0 = np.eye(nT)

        return XS_list, YS_list, X0, Y0, SigmaS_list, Sigma0


    def compute_adaptive_weights(K, nS, nT):
        ak = 8.0 * np.sqrt(nS / (K * nS + nT))
        return [ak] * K









.. GENERATED FROM PYTHON SOURCE LINES 74-89

.. code-block:: Python

    p = 100
    s = 5
    true_beta = 1
    gamma = 0.1
    nS = 50
    nT = 50
    num_uninfo_aux = 2
    num_info_aux = 3
    K = num_info_aux + num_uninfo_aux
    N = nS * K + nT
    ak_weights = compute_adaptive_weights(K, nS, nT)
    lambda_0 = np.sqrt(np.log(p) / N) * 4
    lambda_tilde = np.sqrt(np.log(p) / nT) * 2









.. GENERATED FROM PYTHON SOURCE LINES 90-112

.. code-block:: Python

    def PTL_SI_TL() -> Pipeline:
        XS_list = Data()
        YS_list = Data()
        X0 = Data()
        Y0 = Data()
        SigmaS_list = Data()
        Sigma0 = Data()

        transfusion = TLTransFusion(lambda_0, lambda_tilde, ak_weights)
        active_set = transfusion.run(XS_list, YS_list, X0, Y0)
        return Pipeline(
            inputs=(XS_list, YS_list, X0, Y0, SigmaS_list, Sigma0),
            output=active_set,
            test_statistic=TLHDRTestStatistic(
                XS_list=XS_list, YS_list=YS_list, X0=X0, Y0=Y0
            ),
        )


    my_pipeline = PTL_SI_TL()









.. GENERATED FROM PYTHON SOURCE LINES 113-123

.. code-block:: Python

    XS_list, YS_list, X0, Y0, SigmaS_list, Sigma0 = generate_data(
        p, s, nS, nT, true_beta, num_info_aux, num_uninfo_aux, gamma
    )
    selected_features, p_values = my_pipeline(
        inputs=[XS_list, YS_list, X0, Y0], covariances=[SigmaS_list, Sigma0], verbose=True
    )
    print("Selected features: ", selected_features)
    print("P-values: ", p_values)






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Selected output: [ 0  1  2  3  4  9 25 26 39 94]
    Testing feature 0
    Feature 0: p-value = 0.0
    Testing feature 1
    Feature 1: p-value = 2.0203460144863072e-06
    Testing feature 2
    Feature 2: p-value = 8.410490814902971e-08
    Testing feature 3
    Feature 3: p-value = 8.166800569142652e-13
    Testing feature 4
    Feature 4: p-value = 1.6692671289675332e-07
    Testing feature 5
    Feature 5: p-value = 0.9643427761196788
    Testing feature 6
    Feature 6: p-value = 0.5833179847021623
    Testing feature 7
    Feature 7: p-value = 0.34098893667749164
    Testing feature 8
    Feature 8: p-value = 0.939505432070461
    Testing feature 9
    Feature 9: p-value = 0.9654324823921544
    Selected features:  [ 0  1  2  3  4  9 25 26 39 94]
    P-values:  [0.0, 2.0203460144863072e-06, 8.410490814902971e-08, 8.166800569142652e-13, 1.6692671289675332e-07, 0.9643427761196788, 0.5833179847021623, 0.34098893667749164, 0.939505432070461, 0.9654324823921544]




.. GENERATED FROM PYTHON SOURCE LINES 124-129

.. code-block:: Python

    plt.figure()
    plt.bar(range(len(p_values)), p_values)
    plt.xlabel("Feature index")
    plt.ylabel("P-value")
    plt.show()



.. image-sg:: /auto_examples/feature_selection/images/sphx_glr_PTLSITransFusion_001.png
   :alt: PTLSITransFusion
   :srcset: /auto_examples/feature_selection/images/sphx_glr_PTLSITransFusion_001.png
   :class: sphx-glr-single-img






.. _sphx_glr_download_auto_examples_feature_selection_PTLSITransFusion.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: PTLSITransFusion.ipynb <PTLSITransFusion.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: PTLSITransFusion.py <PTLSITransFusion.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: PTLSITransFusion.zip <PTLSITransFusion.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
