
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples\SFS_DA.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_SFS_DA.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_SFS_DA.py:


SI for Feature Selection after Optimal Transport-based Domain Adaptation
==============================================================================

.. GENERATED FROM PYTHON SOURCE LINES 5-16

.. code-block:: Python


    # Author: Tran Tuan Kiet

    from psi import Pipeline
    from psi.feature_selection import LassoFeatureSelection
    from psi import Data
    from psi.test_statistics import SFS_DATestStatistic
    from psi.domain_adaptation import OptimalTransportDA
    import numpy as np
    import matplotlib.pyplot as plt








.. GENERATED FROM PYTHON SOURCE LINES 17-19

Define the pipeline
-------------------

.. GENERATED FROM PYTHON SOURCE LINES 19-36

.. code-block:: Python


    def SFS_DA() -> Pipeline:
        xs = Data()
        ys = Data() 
    
        xt = Data()
        yt = Data()
    
        OT = OptimalTransportDA()
        x_tilde, y_tilde = OT.run(xs=xs, ys=ys, xt=xt, yt=yt)

        lasso = LassoFeatureSelection(lambda_=10)
        active_set = lasso.run(x_tilde, y_tilde)
        return Pipeline(inputs=(xs, ys, xt, yt), output=active_set, test_statistic=SFS_DATestStatistic(xs=xs, ys=ys, xt=xt, yt=yt))

    my_pipeline = SFS_DA()








.. GENERATED FROM PYTHON SOURCE LINES 37-39

Generate data
-------------

.. GENERATED FROM PYTHON SOURCE LINES 39-52

.. code-block:: Python


    def gen_data(n, p, true_beta):
        x = np.random.normal(loc = 0, scale = 1, size = (n, p))
        true_beta = true_beta.reshape(-1, 1)
    
        mu = x.dot(true_beta)
        Sigma = np.identity(n)
        Y = mu + np.random.normal(loc = 0, scale = 1, size = (n, 1))
        return x, Y, Sigma

    xs, ys, sigma_s = gen_data(150, 5, np.asarray([0, 0, 0, 0, 0]))
    xt, yt, sigma_t = gen_data(25, 5, np.asarray([0, 0, 0, 0, 0]))








.. GENERATED FROM PYTHON SOURCE LINES 53-55

Run the pipeline
-----------------

.. GENERATED FROM PYTHON SOURCE LINES 55-59

.. code-block:: Python


    selected_features, p_values = my_pipeline(inputs=[xs, ys, xt, yt], covariances=[sigma_s, sigma_t])

    print("Selected features: ", selected_features)
    print("P-values: ", p_values)



.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Selected features:  [0 1 3 4]
    P-values:  [0.2639327118170156, 0.22733950153843807, 0.9694448196649681, 0.19738093026457482]





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (3 minutes 4.943 seconds)


.. _sphx_glr_download_auto_examples_SFS_DA.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: SFS_DA.ipynb <SFS_DA.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: SFS_DA.py <SFS_DA.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: SFS_DA.zip <SFS_DA.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
